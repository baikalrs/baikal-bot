import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import os

logging.basicConfig(level=logging.INFO)
TOKEN = os.getenv("TOKEN")

# –°–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å —Ü–µ–Ω–∞–º–∏
PRODUCTS = {
    "–ü–µ–ª—å–º–µ–Ω–∏": [
        ("–ü–µ–ª—å–º–µ–Ω–∏ —Å–æ —Å–≤–∏–Ω–∏–Ω–æ–π-–≥–æ–≤—è–¥–∏–Ω–æ–π", "1150 –¥–∏–Ω/kg"),
        ("–ü–µ–ª—å–º–µ–Ω–∏ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "1300 –¥–∏–Ω/kg"),
        ("–ü–µ–ª—å–º–µ–Ω–∏ —Å –∫—É—Ä–∏—Ü–µ–π", "1000 –¥–∏–Ω/kg")
    ],
    "–í–∞—Ä–µ–Ω–∏–∫–∏": [
        ("–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º –∏ –ª—É–∫–æ–º", "750 –¥–∏–Ω/kg"),
        ("–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º –∏ —à–∞–º–ø–∏–Ω—å–æ–Ω–∞–º–∏", "1000 –¥–∏–Ω/kg"),
        ("–í–∞—Ä–µ–Ω–∏–∫–∏ —Å —Ç–≤–æ—Ä–æ–≥–æ–º", "1150 –¥–∏–Ω/kg"),
        ("–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –≤–∏—à–Ω–µ–π", "1100 –¥–∏–Ω/kg")
    ],
    "–°—ã—Ä–Ω–∏–∫–∏ –∏ –±–ª–∏–Ω—á–∏–∫–∏": [
        ("–°—ã—Ä–Ω–∏–∫–∏", "800 –¥–∏–Ω/10 —à—Ç—É–∫"),
        ("–ë–ª–∏–Ω—á–∏–∫–∏ —Å —è–±–ª–æ–∫–æ–º –∏ –∫–æ—Ä–∏—Ü–µ–π", "600 –¥–∏–Ω/500–≥—Ä"),
        ("–ë–ª–∏–Ω—á–∏–∫–∏ —Å —Ç–≤–æ—Ä–æ–≥–æ–º", "600 –¥–∏–Ω/500–≥—Ä")
        ("–ë–ª–∏–Ω—ã —Å –∫—É—Ä–∏—Ü–µ–π", "750 –¥–∏–Ω/500–≥—Ä"),
        ("–ë–ª–∏–Ω—ã —Å –º—è—Å–æ–º", "750 –¥–∏–Ω/500–≥—Ä")      
    ],
    "–¢–æ—Ä—Ç–∏–∫–∏": [
        ("–ú–µ–¥–æ–≤–∏–∫", "440 –¥–∏–Ω/160–≥—Ä"),
        ("–ú–µ–¥–æ–≤–∏–∫", "4190 –¥–∏–Ω/1.7–∫–≥"),
        ("–ö—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç", "490 –¥–∏–Ω/160–≥—Ä"),
        ("–ú–µ–¥–æ–≤–∏–∫", "4890 –¥–∏–Ω/1.7–∫–≥"),
    ]
}

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"ü•ü–ü—Ä–∏–≤–µ—Ç, {user.first_name}! Baikal - —ç—Ç–∞ —Ç–µ —Å–∞–º—ã–µ –ø–µ–ª—å–º–µ–Ω–∏ —Ä—É—á–Ω–æ–π –ª–µ–ø–∫–∏ –∏–∑ –ë–µ–ª–≥—Ä–∞–¥–∞. –¢–æ–ª—å–∫–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–±–∞–≤–æ–∫! \n\n–î–æ—Å—Ç–∞–≤–∫—É –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ —Å—Ä–µ–¥—É –≤ –ø–µ—Ä–∏–æ–¥ —Å 19:00 –¥–æ 23:00. –î–ª—è –∑–∞–∫–∞–∑–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∏–∂–µ:",
        reply_markup=ReplyKeyboardMarkup([
            ["–ü–µ–ª—å–º–µ–Ω–∏", "–í–∞—Ä–µ–Ω–∏–∫–∏"],
            ["–°—ã—Ä–Ω–∏–∫–∏ –∏ –±–ª–∏–Ω—á–∏–∫–∏", "–¢–æ—Ä—Ç–∏–∫–∏"],
            ["–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞"]
        ], resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text in PRODUCTS:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
        product_list = "\n".join([f"- {name} ‚Äî {price}" for name, price in PRODUCTS[text]])
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}.\n–í–æ—Ç –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n{product_list}")
    elif text == "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞":
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é")

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
